name: "CI"

on:
  workflow_dispatch:
    inputs:
      do_deploy:
        description: "Deploy to cachix"
        required: false
        default: false
        type: "boolean"
  merge_group:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_call:
    inputs:
      do_deploy:
        description: "Deploy to cachix"
        required: false
        default: false
        type: "boolean"

concurrency:
  group: ${{ github.workflow }}-${{ github.repository }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 'Post initial package status comment'
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          recreate: true
          message: |
            Thanks for your Pull Request!

            This comment will be updated automatically with the status of each package.

      - name: Generate CI Matrix
        id: generate-matrix
        uses:  metacraft-labs/nixos-modules/.github/generate-matrix@feat/CD
        with:
          is-initial: 'true'
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      comment: ${{ steps.generate-matrix.outputs.comment }}

  build:
    needs: generate-matrix
    if: needs.generate-matrix.outputs.matrix != '{}' && needs.generate-matrix.outputs.matrix != '{"include":[]}'

    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.generate-matrix.outputs.matrix)}}

    name: ${{ matrix.package }} | ${{ matrix.system }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allowedToFail }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@V27
        with:
          extra_nix_config: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: ${{ vars.EXTRA_CACHIX_CACHES }}

      - name: Build ${{ matrix.package }}
        run: |
          nix run github:Mic92/nix-fast-build -- --skip-cached --flake '.#${{ matrix.attrPath }}' 3>&1 1>&2 2>&3 3>&- | grep --color=always -v "warning: Git tree" | grep --color=always -v "warning: unknown setting" | grep --color=always -v "error (ignored): error: SQLite database"

  results:
    runs-on: ubuntu-latest
    name: Final Results
    needs: [build , generate-matrix]
    steps:
      - uses: actions/checkout@v4

      - name: Generate Matrix
        uses:  metacraft-labs/nixos-modules/.github/generate-matrix@feat/CD
        with:
          is-initial: 'false'
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - uses: cachix/cachix-action@v14
        if: ${{inputs.do_deploy == 'true' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch)) }}
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Deploy
        if: ${{inputs.do_deploy == 'true' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch)) }}
        env:
          CACHIX_ACTIVATE_TOKEN: "${{ secrets.CACHIX_ACTIVATE_TOKEN }}"
        run: nix run github:metacraft-labs/nixos-modules/feat/CD#deploy-spec

      - run: exit 1
        if: >-
          ${{ fromJSON(needs.generate-matrix.outputs.matrix).include.length > 0 &&
            (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
      - run: exit 0
        if: >-
          ${{fromJSON(needs.generate-matrix.outputs.matrix).include.length == 0 &&
          (contains(needs.*.result, 'success') || contains(needs.*.result, 'skipped')) }}
