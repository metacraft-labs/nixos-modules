name: 'CI'

on:
  # Allow this workflow to be reused by other workflows:
  workflow_call:
    inputs:
      runner:
        description: 'JSON-encoded list of runner labels'
        default: '["self-hosted"]'
        required: false
        type: string
      run-cachix-deploy:
        description: 'Deploy to cachix'
        type: 'boolean'
        default: false
        required: false
    secrets:
      CACHIX_AUTH_TOKEN:
        description: 'Cachix auth token'
        required: true
      CACHIX_ACTIVATE_TOKEN:
        description: 'Cachix activate token'
        required: false
      NIX_GITHUB_TOKEN:
        description: GitHub token to add as access-token in nix.conf
        required: false

jobs:
  post-initial-comment:
    runs-on: ${{ fromJSON(inputs.runner) }}
    steps:
      - name: 'Post initial package status comment'
        uses: marocchino/sticky-pull-request-comment@v2.9.1
        with:
          recreate: true
          message: |
            Thanks for your Pull Request!

            This comment will be updated automatically with the status of each package.

  generate-matrices:
    name: Generate Matrices
    runs-on: ${{ fromJSON(inputs.runner) }}
    outputs:
      matrix: ${{ steps.merge-matrix.outputs.matrix }}
      fullMatrix: ${{ steps.merge-matrix.outputs.fullMatrix }}
    steps:
      - name: Install Nix
        uses: metacraft-labs/nixos-modules/.github/install-nix@main
        with:
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}
          nix-github-token: ${{ secrets.NIX_GITHUB_TOKEN }}

      - uses: actions/checkout@v4

      - name: Generate Matrix for Matrix
        id: generate-matrix-of-matrices
        env:
          CACHIX_CACHE: ${{ vars.CACHIX_CACHE }}
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
          MCL_BRANCH: ${{ github.repository == 'metacraft-labs/nixos-modules' && github.sha || 'main' }}
        run: |
          nix run --accept-flake-config github:metacraft-labs/nixos-modules/${{ env.MCL_BRANCH}}#mcl shard_matrix

      - name: Generate CI Matrix
        id: generate-matrix
        env:
          IS_INITIAL: 'true'
          CACHIX_CACHE: ${{ vars.CACHIX_CACHE }}
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
          MCL_BRANCH: ${{ github.repository == 'metacraft-labs/nixos-modules' && github.sha || 'main' }}
        run: |
          matrix_json='${{ steps.generate-matrix-of-matrices.outputs.gen_matrix }}'

          echo "GEN_MATRIX_JSON is:"
          echo "$matrix_json"

          final_matrix='[]'

          while read shard; do
            prefix=$(jq -r '.prefix' <<<"$shard")
            postfix=$(jq -r '.postfix' <<<"$shard")

            echo "Processing shard -> prefix: $prefix, postfix: $postfix"

            shard_output=$(PREFIX="$prefix" POSTFIX="$postfix" \
              nix run --accept-flake-config \
              github:metacraft-labs/nixos-modules/${MCL_BRANCH}#mcl ci_matrix)

            echo "Shard output: $shard_output"

            final_matrix=$(jq --argjson shardData "$shard_output" \
                              '. + [$shardData]' <<<"$final_matrix")
          done < <(jq -c '.include[]' <<< "$matrix_json")

          echo "Final aggregated matrix: $final_matrix"

      - name: Merge matrices
        id: merge-matrix
        run: |
          # Check if jq is installed
          if ! command -v jq &> /dev/null; then
            PATH="$(nix build --print-out-paths 'nixpkgs#jq^bin')/bin:$PATH"
            export PATH
          fi

          if [ -f matrix-pre.json ]; then
            echo "Found matrix-pre.json. Merging..."
            matrix=$(jq -cr '.include' matrix-pre.json | jq -c '{include: .}')
          else
            # Fallback if the file doesn't exist
            matrix='{"include":[]}'
          fi

          echo "---"
          echo "Matrix:"
          echo "$matrix" | jq
          echo "---"

          # fullMatrix could be a superset of 'matrix'
          # or exactly the same, depending on your logic
          fullMatrix="$matrix"

          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
          echo "fullMatrix=$fullMatrix" >> "$GITHUB_OUTPUT"

      - name: Post Comment
        uses: metacraft-labs/nixos-modules/.github/print-matrix@main
        with:
          is-initial: 'true'
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}
          precalc_matrix: ${{ steps.merge-matrix.outputs.fullMatrix }}
          pr-comment-github-token: ${{ secrets.GITHUB_TOKEN }}
          nix-github-token: ${{ secrets.NIX_GITHUB_TOKEN }}

  build:
    needs: generate-matrices
    if: needs.generate-matrices.outputs.matrix != '{"include":[]}'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate-matrices.outputs.matrix) }}
    name: ${{ matrix.name }} | ${{ matrix.system }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allowedToFail }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: metacraft-labs/nixos-modules/.github/install-nix@main
        with:
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}
          nix-github-token: ${{ secrets.NIX_GITHUB_TOKEN }}
      - name: Build ${{ matrix.name }}
        run: |
          nix build -L --no-link --keep-going --show-trace \
            '.#${{ matrix.attrPath }}'
      - name: Push to Cachix ${{ matrix.name }}
        run: |
          cachix push ${{ vars.CACHIX_CACHE }} ${{ matrix.output }}

  results:
    needs: [build, generate-matrices]
    runs-on: ${{ fromJSON(inputs.runner) }}
    name: Final Results
    if: always()
    steps:
      - name: Post Comment
        uses: metacraft-labs/nixos-modules/.github/print-matrix@main
        with:
          is-initial: 'false'
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}
          precalc_matrix: ${{ needs.generate-matrices.outputs.fullMatrix }}
          pr-comment-github-token: ${{ secrets.GITHUB_TOKEN }}
          nix-github-token: ${{ secrets.NIX_GITHUB_TOKEN }}
      - run: exit 1
        if: >-
          needs.generate-matrices.outputs.matrix != '{"include":[]}'
            && contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
      - uses: actions/checkout@v4
        if: inputs.run-cachix-deploy
      - name: Deploy
        if: inputs.run-cachix-deploy
        env:
          CACHIX_CACHE: ${{ vars.CACHIX_CACHE }}
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
          CACHIX_ACTIVATE_TOKEN: '${{ secrets.CACHIX_ACTIVATE_TOKEN }}'
          MCL_BRANCH: ${{ github.repository == 'metacraft-labs/nixos-modules' && github.sha || 'main' }}
        run: nix run --accept-flake-config github:metacraft-labs/nixos-modules/${MCL_BRANCH}#mcl deploy_spec
